class Graph:  
    def __init__(self, vertices):  
        self.vertices = vertices  
        self.edges = []  
        self.adjacency_list = {v: [] for v in vertices}  # vertex is initializes each vertex as empty list
  
    def add_edge(self, u, v, weight):  
        self.edges.append((u, v, weight))  # u,v,weight are added to list of edges(u,v are vertices)
        self.adjacency_list[u].append((v, weight))  
        self.adjacency_list[v].append((u, weight))  
  
    def find_parent(self, parent, i):  
        if parent[i] == i:                # used to find the parent,
            return i  
        return self.find_parent(parent, parent[i])  #here it finds it recursively
  
    def union(self, parent, rank, x, y):        #union is used to find weather it forms cycle or not
        root_x = self.find_parent(parent, x)    #The method finds the root parents of vertices x and y using the find_parent method.
        root_y = self.find_parent(parent, y)  
        if rank[root_x] < rank[root_y]:  
            parent[root_x] = root_y  
        elif rank[root_x] > rank[root_y]:  
            parent[root_y] = root_x  
        else:  
            parent[root_y] = root_x  
            rank[root_x] += 1  
  
    def kruskal(self):  
        minimum_spanning_tree = set()  
        parent = {}  
        rank = {}  
        for v in self.vertices:  
            parent[v] = v  
            rank[v] = 0  
        sorted_edges = sorted(self.edges, key=lambda x: x[2])  #lambda is used for weight of edge 
        for edge in sorted_edges:  
            u, v, weight = edge  
            root_u = self.find_parent(parent, u)  
            root_v = self.find_parent(parent, v)  
            if root_u != root_v:  
                minimum_spanning_tree.add(edge)  
                self.union(parent, rank, root_u, root_v)  
        return minimum_spanning_tree  
vertices = [0, 1, 2, 3]  
g = Graph(vertices)  
g.add_edge(0, 1, 5)  
g.add_edge(0, 2, 10)  
g.add_edge(0, 3, 3)  
g.add_edge(1, 3, 1)  
g.add_edge(2, 3, 4)  
minimum_spanning_tree = g.kruskal()  
print(minimum_spanning_tree)  

#Sort all the edges in non-decreasing order of their weight. 
#Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If the cycle is not formed, include this edge. Else, discard it. 
#Repeat step#2 until there are (V-1) edges in the spanning tree.
